// Generated by gencpp from file turtle_control/kf.msg
// DO NOT EDIT!


#ifndef TURTLE_CONTROL_MESSAGE_KF_H
#define TURTLE_CONTROL_MESSAGE_KF_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtle_control
{
template <class ContainerAllocator>
struct kf_
{
  typedef kf_<ContainerAllocator> Type;

  kf_()
    : x_kf(0.0)
    , x_odom(0.0)
    , x_sensor(0.0)
    , x_sensor_var(0.0)  {
    }
  kf_(const ContainerAllocator& _alloc)
    : x_kf(0.0)
    , x_odom(0.0)
    , x_sensor(0.0)
    , x_sensor_var(0.0)  {
  (void)_alloc;
    }



   typedef float _x_kf_type;
  _x_kf_type x_kf;

   typedef float _x_odom_type;
  _x_odom_type x_odom;

   typedef float _x_sensor_type;
  _x_sensor_type x_sensor;

   typedef float _x_sensor_var_type;
  _x_sensor_var_type x_sensor_var;





  typedef boost::shared_ptr< ::turtle_control::kf_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtle_control::kf_<ContainerAllocator> const> ConstPtr;

}; // struct kf_

typedef ::turtle_control::kf_<std::allocator<void> > kf;

typedef boost::shared_ptr< ::turtle_control::kf > kfPtr;
typedef boost::shared_ptr< ::turtle_control::kf const> kfConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtle_control::kf_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtle_control::kf_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtle_control::kf_<ContainerAllocator1> & lhs, const ::turtle_control::kf_<ContainerAllocator2> & rhs)
{
  return lhs.x_kf == rhs.x_kf &&
    lhs.x_odom == rhs.x_odom &&
    lhs.x_sensor == rhs.x_sensor &&
    lhs.x_sensor_var == rhs.x_sensor_var;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtle_control::kf_<ContainerAllocator1> & lhs, const ::turtle_control::kf_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtle_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::turtle_control::kf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtle_control::kf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtle_control::kf_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtle_control::kf_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_control::kf_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtle_control::kf_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtle_control::kf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0d726d72060def9671484e9bd7b7c259";
  }

  static const char* value(const ::turtle_control::kf_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0d726d72060def96ULL;
  static const uint64_t static_value2 = 0x71484e9bd7b7c259ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtle_control::kf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtle_control/kf";
  }

  static const char* value(const ::turtle_control::kf_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtle_control::kf_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x_kf\n"
"float32 x_odom\n"
"float32 x_sensor\n"
"float32 x_sensor_var\n"
;
  }

  static const char* value(const ::turtle_control::kf_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtle_control::kf_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_kf);
      stream.next(m.x_odom);
      stream.next(m.x_sensor);
      stream.next(m.x_sensor_var);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kf_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtle_control::kf_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtle_control::kf_<ContainerAllocator>& v)
  {
    s << indent << "x_kf: ";
    Printer<float>::stream(s, indent + "  ", v.x_kf);
    s << indent << "x_odom: ";
    Printer<float>::stream(s, indent + "  ", v.x_odom);
    s << indent << "x_sensor: ";
    Printer<float>::stream(s, indent + "  ", v.x_sensor);
    s << indent << "x_sensor_var: ";
    Printer<float>::stream(s, indent + "  ", v.x_sensor_var);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLE_CONTROL_MESSAGE_KF_H
